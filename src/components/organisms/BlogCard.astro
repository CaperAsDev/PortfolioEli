---
import { getLangFromUrl } from "@/i18n/utils";
import type { ImageMetadata } from "astro";
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";

interface Props {
  title: string;
  description: string;
  url: string;
  image: ImageMetadata;
  iconName: string;
  color: string;
}
const callsToAction = {
  en: "View",
  es: "Ver",
  pt: "Ver",
};

const lang = getLangFromUrl(Astro.url);
const { title, description, url, image, iconName, color } = Astro.props;
const hrefBase = lang == "en" ? Astro.url.origin : Astro.url.href;
---

<article>
  <div>
    <h3>
      <Icon name={`tabler:${iconName}`} />
      {title}
    </h3>
    <p>{description}</p>
    <a href={`${hrefBase}${url}`}>{callsToAction[lang]}</a>
  </div>
  <Image src={image} alt={`Reprentative image for: ${title}`} />
</article>
<style define:vars={{ "border-clr": color }}>
  article {
    max-width: 700px;
    position: relative;
    color: var(--light);
    outline: 1px solid var(--border-clr);

    h3 {
      display: flex;
      align-items: end;
      gap: var(--fs-xs);
      font-weight: 600;
      font-size: var(--fs-m);
      margin: 0;
    }

    div {
      padding: var(--fs-s);
      position: relative;
      z-index: 10;
      margin: 0;
      backdrop-filter: brightness(0.5);
    }

    img {
      position: absolute;
      inset: 0;
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    p {
      margin-block: var(--fs-xl);
    }

    a {
      text-align: center;
      display: block;
      font-weight: 600;
      color: var(--light);
      background-color: oklch(
        from var(--border-clr) calc(l + 0.1) calc(c - 0.05) h
      );
      padding: var(--fs-xs) var(--fs-s);
      margin: var(--fs-s);

      &:hover,
      &:focus-visible {
        color: var(--light);
        background-color: oklch(
          from var(--border-clr) calc(l - 0.1) calc(c - 0.03) h
        );
      }
    }
  }
  @media screen and (width >= 1440px) {
    article,
    div {
      height: 100%;
    }

    div {
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      align-items: center;

      p {
        text-align: center;
        width: 100%;
      }
      a {
        width: 100%;
      }
    }
  }
</style>
