---
import { Icon } from "astro-icon/components";
---

<button class="scene" id="color-sheme-toggle">
  <div class="cube">
    <Icon class="face top" name="tabler:bulb" />
    <Icon class="face front" name="tabler:moon" />
  </div>
</button>
<style>
  .scene {
    --half-negative: calc((var(--fs-m) / 2) * -1);
    width: var(--fs-m);
    height: var(--fs-m);
    perspective: calc(var(--fs-m) * 5);
  }
  button {
    border: none;
    background-color: transparent;
    cursor: pointer;
  }
  .cube {
    transform-style: preserve-3d;
    position: relative;
    width: 100%;
    height: 100%;
    transform: translateZ(var(--half-negative));
    transition: transform 0.5s;
  }
  .face {
    position: absolute;
    width: var(--fs-m);
    height: var(--fs-m);
    transition: opacity 0.5s;
  }
  .front {
    transform: rotateY(0deg) translateZ(calc(var(--fs-m) / 2));
  }
  .top {
    transform: rotateX(90deg) translateZ(calc(var(--fs-m) / 2));
    opacity: 0;
  }
  .cube.show-top {
    transform: translateZ(var(--half-negative)) rotateX(-90deg);

    .front {
      opacity: 0;
    }

    .top {
      opacity: 1;
    }
  }
  .cube.show-front {
    transform: translateZ(var(--half-negative)) rotateY(0deg);

    .front {
      opacity: 1;
    }
    .top {
      opacity: 0;
    }
  }
</style>
<script>
  const colorSchemeToggle = document.getElementById("color-sheme-toggle");
  const cube = document.querySelector(".cube");
  const html = document.documentElement;

  const setTheme = (theme: "dark" | "light") => {
    // Clear all custom classes and attributes
    document.documentElement.removeAttribute("data-theme");

    if (theme === "dark") {
      cube?.classList.add("show-top");
      cube?.classList.remove("show-front");
    } else {
      cube?.classList.remove("show-top");
      cube?.classList.add("show-front");
    }

    html.setAttribute("data-theme", theme);

    localStorage.setItem("theme", theme);
  };

  const loadTheme = () => {
    const savedTheme = localStorage.getItem("theme") as "dark" | "light" | null;

    savedTheme ? setTheme(savedTheme) : setTheme("dark");
  };

  loadTheme();

  colorSchemeToggle?.addEventListener("click", () => {
    const currentTheme = localStorage.getItem("theme") as
      | "dark"
      | "light"
      | null;
    currentTheme === "light" ? setTheme("dark") : setTheme("light");
  });
</script>
